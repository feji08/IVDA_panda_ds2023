{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myBarChart\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-0.5 mb-0\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, \" Company Size VS. Average Company Size in \" + _toDisplayString(_ctx.$props.selectedCategory), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }), _hoisted_1]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_toDisplayString","_ctx","$props","selectedCategory","_hoisted_1"],"sources":["/Users/ritawang/Documents/UZH FALL/IVDA/A1/example-project/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-0.5 mb-0\">\n      <h3> Company Size VS. Average Company Size in {{ $props.selectedCategory }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCompanyId\",\"selectedCompanyName\",\"selectedCategory\"],\n  data: () => ({\n    BarChartData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  watch: {\n    selectedCompanyId() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    },\n    selectedCategory() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchAllCompaniesInCategory(category) {\n      // 发送请求以获取所在类别的所有公司\n      const reqUrl = 'http://127.0.0.1:5000/companies?category=' + category;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchSelectedCompanyData(companyId) {\n      // 发送请求以获取选定公司的数据\n      const reqUrl = 'http://127.0.0.1:5000/companies/' + companyId + '?algorithm=None';\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      //const selectedCompanyData = await this.fetchSelectedCompanyData(this.$props.selectedCompanyId);\n      const selectedCompanyData = await this.fetchSelectedCompanyData(1);\n      const selectedCompanyCategory = selectedCompanyData.category;\n\n      // req URL to retrieve all companies from the category above\n      const allCompaniesInCategory = await this.fetchAllCompaniesInCategory(selectedCompanyCategory);\n\n      // Calculate the average number of employees in the same category of companies\n      let totalEmployeesInCategory = 0;\n      let totalCompaniesInCategory = 0;\n\n      // Iterate through all companies in the same category and get average employees in category\n      for (const company of allCompaniesInCategory) {\n        totalEmployeesInCategory += company.employees;\n        totalCompaniesInCategory++;\n      }\n      const averageEmployeesInCategory = totalEmployeesInCategory / totalCompaniesInCategory; // Calculate the average\n\n      // transform data to usable by barchart\n      this.BarChartData.x.push(selectedCompanyData.name);\n      this.BarChartData.x.push(selectedCompanyCategory + 'company');\n      this.BarChartData.y.push(selectedCompanyData.employees);\n      this.BarChartData.y.push(averageEmployeesInCategory);\n\n      // draw the bar chart after the data is processed\n      this.drawBarChart();\n    },\n    drawBarChart() {\n      var data = [\n        {this.BarChartData,\n          \n      ]; // 使用BarChartData\n      var layout = {\n        xaxis: {\n          title: 'Company'\n        },\n        yaxis: {\n          title: 'Employees'\n        }\n      }\n      var config = { responsive: true, displayModeBar: false }\n      Plotly.newPlot('myBarChart', data, layout, config);\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>\n"],"mappings":";gCAKIA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAmD;EAA9CE,EAAE,EAAC,YAAY;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBALzBE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAAgF,CAAhFR,mBAAA,CAAgF,YAA5E,4CAA0C,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,MAAM,CAACC,gBAAgB,iB;;;MAE1EC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}