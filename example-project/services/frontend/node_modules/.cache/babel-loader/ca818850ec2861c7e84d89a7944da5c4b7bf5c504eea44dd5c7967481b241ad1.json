{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCompanyId\", \"selectedCompanyName\", \"selectedCategory\"],\n  data: () => ({\n    BarChartData: {\n      x: [],\n      y: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  watch: {\n    selectedCompanyId() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.fetchData();\n    },\n    selectedCategory() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchAllCompaniesInCategory(category) {\n      // 发送请求以获取所在类别的所有公司\n      const reqUrl = 'http://127.0.0.1:5000/companies?category=' + category;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchSelectedCompanyData(companyId) {\n      // 发送请求以获取选定公司的数据\n      const reqUrl = 'http://127.0.0.1:5000/companies/' + companyId;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchData() {\n      // 获取选定公司的数据\n      const selectedCompanyData = await this.fetchSelectedCompanyData(this.$props.selectedCompanyId);\n\n      // 获取选中公司的类别\n      const selectedCompanyCategory = selectedCompanyData.category;\n\n      // 获取所在类别的所有公司\n      const allCompaniesInCategory = await this.fetchAllCompaniesInCategory(selectedCompanyCategory);\n\n      // 处理选定公司的数据，你可以根据需要进行处理\n      this.BarChartData.x.push(selectedCompanyData.name);\n      this.BarChartData.x.push(selectedCompanyCategory + 'company');\n      this.BarChartData.y.push(selectedCompanyData.name);\n\n      // draw the bar chart after the data is processed\n      this.drawBarChart();\n\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompanyId + '?algorithm=' + this.$props.selectedAlgorithm;\n      console.log(\"ReqURL \" + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      // transform data to usable by lineplot\n      responseData.profit.forEach(profit => {\n        this.LinePlotData.x.push(profit.year);\n        this.LinePlotData.y.push(profit.value);\n      });\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot();\n    },\n    drawLinePlot() {\n      var trace1 = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter'\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Profit'\n        }\n      };\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myBarChart', data, layout, config);\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","BarChartData","x","y","mounted","fetchData","watch","selectedCompanyId","selectedCategory","methods","fetchAllCompaniesInCategory","category","reqUrl","response","fetch","json","fetchSelectedCompanyData","companyId","selectedCompanyData","$props","selectedCompanyCategory","allCompaniesInCategory","push","drawBarChart","selectedAlgorithm","console","log","responseData","profit","forEach","LinePlotData","year","value","drawLinePlot","trace1","type","layout","xaxis","title","yaxis","config","responsive","displayModeBar","newPlot"],"sources":["/Users/ritawang/Documents/UZH FALL/IVDA/A1/example-project/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-0.5 mb-0\">\n      <h3> Company Size VS. Average Company Size in {{ $props.selectedCategory }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCompanyId\",\"selectedCompanyName\",\"selectedCategory\"],\n  data: () => ({\n    BarChartData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  watch: {\n    selectedCompanyId() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    },\n    selectedCategory() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchAllCompaniesInCategory(category) {\n      // 发送请求以获取所在类别的所有公司\n      const reqUrl = 'http://127.0.0.1:5000/companies?category=' + category;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchSelectedCompanyData(companyId) {\n      // 发送请求以获取选定公司的数据\n      const reqUrl = 'http://127.0.0.1:5000/companies/' + companyId;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchData() {\n      // 获取选定公司的数据\n      const selectedCompanyData = await this.fetchSelectedCompanyData(this.$props.selectedCompanyId,);\n\n      // 获取选中公司的类别\n      const selectedCompanyCategory = selectedCompanyData.category;\n\n      // 获取所在类别的所有公司\n      const allCompaniesInCategory = await this.fetchAllCompaniesInCategory(selectedCompanyCategory);\n\n      // 处理选定公司的数据，你可以根据需要进行处理\n      this.BarChartData.x.push(selectedCompanyData.name);\n      this.BarChartData.x.push(selectedCompanyCategory + 'company');\n      this.BarChartData.y.push(selectedCompanyData.name);\n\n      // draw the bar chart after the data is processed\n      this.drawBarChart();\n\n\n\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompanyId +\n          '?algorithm=' + this.$props.selectedAlgorithm\n      console.log(\"ReqURL \" + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n      // transform data to usable by lineplot\n      responseData.profit.forEach((profit) => {\n        this.LinePlotData.x.push(profit.year)\n        this.LinePlotData.y.push(profit.value)\n      })\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot()\n    },\n    drawLinePlot() {\n      var trace1 = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter'\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Profit'\n        }\n      }\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myBarChart', data, layout, config);\n\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>\n"],"mappings":";AAcA,OAAOA,MAAK,MAAO,uBAAuB;AAC1C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,CAAC,mBAAmB,EAAC,qBAAqB,EAAC,kBAAkB,CAAC;EACrEC,IAAI,EAAEA,CAAA,MAAO;IACXC,YAAY,EAAE;MAACC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE;EAC7B,CAAC,CAAC;EACFC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC;EACjB,CAAC;EACDC,KAAK,EAAE;IACLC,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACN,YAAY,CAACC,CAAA,GAAI,EAAE;MACxB,IAAI,CAACD,YAAY,CAACE,CAAA,GAAI,EAAE;MAExB,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB,CAAC;IACDG,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACP,YAAY,CAACC,CAAA,GAAI,EAAE;MACxB,IAAI,CAACD,YAAY,CAACE,CAAA,GAAI,EAAE;MAExB,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB;EACF,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,2BAA2BA,CAACC,QAAQ,EAAE;MAC1C;MACA,MAAMC,MAAK,GAAI,2CAA0C,GAAID,QAAQ;MACrE,MAAME,QAAO,GAAI,MAAMC,KAAK,CAACF,MAAM,CAAC;MACpC,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC;IACD,MAAMC,wBAAwBA,CAACC,SAAS,EAAE;MACxC;MACA,MAAML,MAAK,GAAI,kCAAiC,GAAIK,SAAS;MAC7D,MAAMJ,QAAO,GAAI,MAAMC,KAAK,CAACF,MAAM,CAAC;MACpC,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC;IACD,MAAMV,SAASA,CAAA,EAAG;MAChB;MACA,MAAMa,mBAAkB,GAAI,MAAM,IAAI,CAACF,wBAAwB,CAAC,IAAI,CAACG,MAAM,CAACZ,iBAAkB,CAAC;;MAE/F;MACA,MAAMa,uBAAsB,GAAIF,mBAAmB,CAACP,QAAQ;;MAE5D;MACA,MAAMU,sBAAqB,GAAI,MAAM,IAAI,CAACX,2BAA2B,CAACU,uBAAuB,CAAC;;MAE9F;MACA,IAAI,CAACnB,YAAY,CAACC,CAAC,CAACoB,IAAI,CAACJ,mBAAmB,CAACpB,IAAI,CAAC;MAClD,IAAI,CAACG,YAAY,CAACC,CAAC,CAACoB,IAAI,CAACF,uBAAsB,GAAI,SAAS,CAAC;MAC7D,IAAI,CAACnB,YAAY,CAACE,CAAC,CAACmB,IAAI,CAACJ,mBAAmB,CAACpB,IAAI,CAAC;;MAElD;MACA,IAAI,CAACyB,YAAY,CAAC,CAAC;;MAInB;MACA,IAAIX,MAAK,GAAI,kCAAiC,GAAI,IAAI,CAACO,MAAM,CAACZ,iBAAgB,GAC1E,aAAY,GAAI,IAAI,CAACY,MAAM,CAACK,iBAAgB;MAChDC,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAId,MAAM;MAC9B;MACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACF,MAAM;MACnC,MAAMe,YAAW,GAAI,MAAMd,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC1C;MACAY,YAAY,CAACC,MAAM,CAACC,OAAO,CAAED,MAAM,IAAK;QACtC,IAAI,CAACE,YAAY,CAAC5B,CAAC,CAACoB,IAAI,CAACM,MAAM,CAACG,IAAI;QACpC,IAAI,CAACD,YAAY,CAAC3B,CAAC,CAACmB,IAAI,CAACM,MAAM,CAACI,KAAK;MACvC,CAAC;MACD;MACA,IAAI,CAACC,YAAY,CAAC;IACpB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb,IAAIC,MAAK,GAAI;QACXhC,CAAC,EAAE,IAAI,CAAC4B,YAAY,CAAC5B,CAAC;QACtBC,CAAC,EAAE,IAAI,CAAC2B,YAAY,CAAC3B,CAAC;QACtBgC,IAAI,EAAE;MACR,CAAC;MACD,IAAInC,IAAG,GAAI,CAACkC,MAAM,CAAC;MACnB,IAAIE,MAAK,GAAI;QACXC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT,CAAC;QACDC,KAAK,EAAE;UACLD,KAAK,EAAE;QACT;MACF;MACA,IAAIE,MAAK,GAAI;QAACC,UAAU,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAK;MACrD7C,MAAM,CAAC8C,OAAO,CAAC,YAAY,EAAE3C,IAAI,EAAEoC,MAAM,EAAEI,MAAM,CAAC;IAEpD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}