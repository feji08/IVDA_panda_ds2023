{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\"selectedCategory\"],\n  data: () => ({\n    ScatterPlotData: {\n      x: [],\n      y: [],\n      name: [],\n      color: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory;\n      console.log('ReqURL ' + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      const colorForCategory = {\n        bank: 'yellow',\n        tech: 'green',\n        health: 'red'\n      };\n      const colorAll = [];\n\n      // transform data to usable by scatterplot\n      responseData.forEach(company => {\n        this.ScatterPlotData.name.push(company.name);\n        this.ScatterPlotData.x.push(company.founding_year);\n        this.ScatterPlotData.y.push(company.employees);\n        this.ScatterPlotData.color.push(colorForCategory[company.category]);\n        colorAll.push(colorForCategory[company.category]);\n      });\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot(colorAll);\n    },\n    drawScatterPlot(colorAll) {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: colorAll,\n          size: 12\n        }\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Founding_year'\n        },\n        yaxis: {\n          title: 'Employees'\n        }\n      };\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot(colorAll);\n    },\n    clickScatterPlot(colorAll) {\n      var pn = 0;\n      var that = this;\n      var myPlot = document.getElementById('myScatterPlot');\n      var colors = colorAll;\n      var companyNames = this.ScatterPlotData.name;\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n          colors = colorAll.slice();\n          // get the index of point\n          pn = data.points[i].pointNumber;\n\n          // emit event to change the currently selected company in the a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', companyNames[pn]);\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {\n            'marker': {\n              color: colors,\n              size: 12\n            }\n          };\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","ScatterPlotData","x","y","color","mounted","fetchData","watch","selectedCategory","methods","reqUrl","$props","console","log","response","fetch","responseData","json","colorForCategory","bank","tech","health","colorAll","forEach","company","push","founding_year","employees","category","drawScatterPlot","trace1","mode","type","text","marker","size","layout","xaxis","title","yaxis","config","responsive","displayModeBar","newPlot","clickScatterPlot","pn","that","myPlot","document","getElementById","colors","companyNames","on","i","points","length","slice","pointNumber","$emit","update","restyle"],"sources":["/Users/ritawang/Documents/UZH FALL/IVDA/A1/example-project/services/frontend/src/components/ScatterPlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-0.5 mb-0\">\n      <h3>Overview of {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myScatterPlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\n    \"selectedCategory\"\n  ],\n  data: () => ({\n    ScatterPlotData: {x: [], y: [], name: [], color: []},\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n      const colorForCategory = {\n        bank: 'yellow',\n        tech: 'green',\n        health: 'red',\n      }\n      const colorAll = []\n\n      // transform data to usable by scatterplot\n      responseData.forEach((company) => {\n        this.ScatterPlotData.name.push(company.name)\n        this.ScatterPlotData.x.push(company.founding_year)\n        this.ScatterPlotData.y.push(company.employees)\n        this.ScatterPlotData.color.push(colorForCategory[company.category]);\n        colorAll.push(colorForCategory[company.category])\n      })\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot(colorAll)\n    },\n    drawScatterPlot(colorAll) {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: colorAll,\n          size: 12\n        }\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Founding_year'\n        },\n        yaxis: {\n          title: 'Employees'\n        }\n      }\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n\n      this.clickScatterPlot(colorAll)\n    },\n    clickScatterPlot(colorAll) {\n      var pn = 0\n      var that = this\n      var myPlot = document.getElementById('myScatterPlot')\n      var colors = colorAll;\n      var companyNames = this.ScatterPlotData.name;\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n          colors = colorAll.slice();\n          // get the index of point\n          pn = data.points[i].pointNumber;\n\n          // emit event to change the currently selected company in the a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', companyNames[pn])\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {'marker': {color: colors, size: 12}};\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n  }\n}\n</script>\n\n\n\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}