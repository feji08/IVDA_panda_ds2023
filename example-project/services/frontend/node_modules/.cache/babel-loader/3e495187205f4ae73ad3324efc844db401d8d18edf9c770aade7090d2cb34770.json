{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCompanyId\", \"selectedCompanyName\", \"selectedCategory\"],\n  data: () => ({\n    BarChartData: {\n      x: [],\n      y: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  watch: {\n    selectedCompanyId() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.fetchData();\n    },\n    selectedCategory() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchAllCompaniesInCategory(category) {\n      // 发送请求以获取所在类别的所有公司\n      const reqUrl = 'http://127.0.0.1:5000/companies?category=' + category;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchSelectedCompanyData(companyId) {\n      // 发送请求以获取选定公司的数据\n      const reqUrl = 'http://127.0.0.1:5000/companies/' + companyId + '?algorithm=None';\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      //const selectedCompanyData = await this.fetchSelectedCompanyData(this.$props.selectedCompanyId);\n      const selectedCompanyData = await this.fetchSelectedCompanyData(1);\n      const selectedCompanyCategory = selectedCompanyData.category;\n\n      // req URL to retrieve all companies from the category above\n      const allCompaniesInCategory = await this.fetchAllCompaniesInCategory(selectedCompanyCategory);\n\n      // Calculate the average number of employees in the same category of companies\n      let totalEmployeesInCategory = 0;\n      let totalCompaniesInCategory = 0;\n\n      // Iterate through all companies in the same category and get average employees in category\n      for (const company of allCompaniesInCategory) {\n        totalEmployeesInCategory += company.employees;\n        totalCompaniesInCategory++;\n      }\n      const averageEmployeesInCategory = totalEmployeesInCategory / totalCompaniesInCategory; // Calculate the average\n\n      // transform data to usable by barchart\n      this.BarChartData.x.push(selectedCompanyData.name);\n      this.BarChartData.x.push(selectedCompanyCategory + 'company');\n      this.BarChartData.y.push(selectedCompanyData.employees);\n      this.BarChartData.y.push(averageEmployeesInCategory);\n\n      // draw the bar chart after the data is processed\n      this.drawBarChart();\n    },\n    drawBarChart() {\n      var data = [{\n        x: this.BarChartData.x,\n        y: this.BarChartData.y,\n        type: 'bar'\n      }]; // 使用BarChartData\n      var layout = {\n        xaxis: {\n          title: 'Company'\n        },\n        yaxis: {\n          title: 'Employees'\n        }\n      };\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myBarChart', data, layout, config);\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","BarChartData","x","y","mounted","fetchData","watch","selectedCompanyId","selectedCategory","methods","fetchAllCompaniesInCategory","category","reqUrl","response","fetch","json","fetchSelectedCompanyData","companyId","selectedCompanyData","selectedCompanyCategory","allCompaniesInCategory","totalEmployeesInCategory","totalCompaniesInCategory","company","employees","averageEmployeesInCategory","push","drawBarChart","type","layout","xaxis","title","yaxis","config","responsive","displayModeBar","newPlot"],"sources":["/Users/ritawang/Documents/UZH FALL/IVDA/A1/example-project/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-0.5 mb-0\">\n      <h3> Company Size VS. Average Company Size in {{ $props.selectedCategory }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCompanyId\",\"selectedCompanyName\",\"selectedCategory\"],\n  data: () => ({\n    BarChartData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  watch: {\n    selectedCompanyId() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    },\n    selectedCategory() {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    }\n  },\n  methods: {\n    async fetchAllCompaniesInCategory(category) {\n      // 发送请求以获取所在类别的所有公司\n      const reqUrl = 'http://127.0.0.1:5000/companies?category=' + category;\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchSelectedCompanyData(companyId) {\n      // 发送请求以获取选定公司的数据\n      const reqUrl = 'http://127.0.0.1:5000/companies/' + companyId + '?algorithm=None';\n      const response = await fetch(reqUrl);\n      return response.json();\n    },\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      //const selectedCompanyData = await this.fetchSelectedCompanyData(this.$props.selectedCompanyId);\n      const selectedCompanyData = await this.fetchSelectedCompanyData(1);\n      const selectedCompanyCategory = selectedCompanyData.category;\n\n      // req URL to retrieve all companies from the category above\n      const allCompaniesInCategory = await this.fetchAllCompaniesInCategory(selectedCompanyCategory);\n\n      // Calculate the average number of employees in the same category of companies\n      let totalEmployeesInCategory = 0;\n      let totalCompaniesInCategory = 0;\n\n      // Iterate through all companies in the same category and get average employees in category\n      for (const company of allCompaniesInCategory) {\n        totalEmployeesInCategory += company.employees;\n        totalCompaniesInCategory++;\n      }\n      const averageEmployeesInCategory = totalEmployeesInCategory / totalCompaniesInCategory; // Calculate the average\n\n      // transform data to usable by barchart\n      this.BarChartData.x.push(selectedCompanyData.name);\n      this.BarChartData.x.push(selectedCompanyCategory + 'company');\n      this.BarChartData.y.push(selectedCompanyData.employees);\n      this.BarChartData.y.push(averageEmployeesInCategory);\n\n      // draw the bar chart after the data is processed\n      this.drawBarChart();\n    },\n    drawBarChart() {\n      var data = [\n        {\n          x: this.BarChartData.x,\n          y: this.BarChartData.y,\n          type: 'bar'\n        }\n      ]; // 使用BarChartData\n      var layout = {\n        xaxis: {\n          title: 'Company'\n        },\n        yaxis: {\n          title: 'Employees'\n        }\n      }\n      var config = { responsive: true, displayModeBar: false }\n      Plotly.newPlot('myBarChart', data, layout, config);\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}